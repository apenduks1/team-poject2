{"mappings":"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","sources":["src/JS/scientist.js"],"sourcesContent":["const scientists = [\n  {\n    name: 'Albert',\n    surname: 'Einstein',\n    born: 1879,\n    dead: 1955,\n    id: 1,\n  },\n  {\n    name: 'Isaac',\n    surname: 'Newton',\n    born: 1643,\n    dead: 1727,\n    id: 2,\n  },\n  {\n    name: 'Galileo',\n    surname: 'Galilei',\n    born: 1564,\n    dead: 1642,\n    id: 3,\n  },\n  {\n    name: 'Marie',\n    surname: 'Curie',\n    born: 1867,\n    dead: 1934,\n    id: 4,\n  },\n  {\n    name: 'Johannes',\n    surname: 'Kepler',\n    born: 1571,\n    dead: 1630,\n    id: 5,\n  },\n  {\n    name: 'Nicolaus',\n    surname: 'Copernicus',\n    born: 1473,\n    dead: 1543,\n    id: 6,\n  },\n  {\n    name: 'Max',\n    surname: 'Planck',\n    born: 1858,\n    dead: 1947,\n    id: 7,\n  },\n  {\n    name: 'Katherine',\n    surname: 'Blodgett',\n    born: 1898,\n    dead: 1979,\n    id: 8,\n  },\n  {\n    name: 'Ada',\n    surname: 'Lovelace',\n    born: 1815,\n    dead: 1852,\n    id: 9,\n  },\n  {\n    name: 'Sarah E.',\n    surname: 'Goode',\n    born: 1855,\n    dead: 1905,\n    id: 10,\n  },\n  {\n    name: 'Lise',\n    surname: 'Meitner',\n    born: 1878,\n    dead: 1968,\n    id: 11,\n  },\n  {\n    name: 'Hanna',\n    surname: 'HammarstrÃ¶m',\n    born: 1829,\n    dead: 1909,\n    id: 12,\n  },\n];\nconst allBtns = document.querySelectorAll('.fact__list-btn');\nallBtns.forEach(btn => {\n  btn.addEventListener('click', () => {\n    console.log(btn.getAttribute('data-value'));\n    switch (btn.getAttribute('data-value')) {\n      case '19th-century':\n        century();\n        break;\n      case 'einstein':\n        albertEinstein();\n        break;\n      case 'ABC':\n        ABC();\n        break;\n      case 'firstName-c':\n        firstNameC();\n        break;\n      case 'delete-a':\n        deleteA();\n        break;\n      case 'yearsSort':\n        yearsSort();\n        break;\n      case 'earlyYears':\n        earlyYears();\n        break;\n      case 'longestAndSmallestYears':\n        longestAndSmallestYears();\n        break;\n\n      case 'surnamesMatch':\n        surnamesMatch();\n        break;\n      default:\n        break;\n    }\n  });\n});\n\nconst nameParagraphs = document.querySelectorAll('.name');\nconst surname = document.querySelectorAll('.surname');\nconst birthYear = document.querySelectorAll('.birthYear');\nconst deathYear = document.querySelectorAll('.deathYear');\n\nconst century = function () {\n  const filteredElements = scientists.filter(\n    scientist => scientist.born >= 1801 && scientist.born <= 1900\n  );\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst albertEinstein = function () {\n  const filteredElements = scientists.filter(\n    scientist => scientist.surname === 'Einstein'\n  );\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst ABC = function () {\n  const allScientists = scientists.slice();\n\n  allScientists.sort((a, b) => a.surname.localeCompare(b.surname));\n\n  const filteredNames = allScientists.map(scientist => scientist.name);\n  const filteredSurname = allScientists.map(scientist => scientist.surname);\n  const filteredYear = allScientists.map(scientist => scientist.born);\n  const filteredDeath = allScientists.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst firstNameC = function () {\n  const filteredElements = scientists.filter(\n    scientist => scientist.surname[0] === 'C'\n  );\n\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst deleteA = function () {\n  const filteredElements = scientists.filter(\n    scientist => scientist.name[0] !== 'A'\n  );\n\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst surnamesMatch = function () {\n  const filteredElements = scientists.filter(\n    scientist => scientist.name[0] === scientist.surname[0]\n  );\n\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst yearsSort = function () {\n  const filteredElements = scientists.sort((a, b) => a.born - b.born);\n  const filteredNames = filteredElements.map(scientist => scientist.name);\n  const filteredSurname = filteredElements.map(scientist => scientist.surname);\n  const filteredYear = filteredElements.map(scientist => scientist.born);\n  const filteredDeath = filteredElements.map(scientist => scientist.dead);\n\n  nameParagraphs.forEach((paragraph, index) => {\n    paragraph.textContent = filteredNames[index];\n  });\n  surname.forEach((paragraph, index) => {\n    paragraph.textContent = filteredSurname[index];\n  });\n  birthYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredYear[index];\n  });\n  deathYear.forEach((paragraph, index) => {\n    paragraph.textContent = filteredDeath[index];\n  });\n};\n\nconst earlyYears = function () {\n  nameParagraphs.forEach(paragraph => {\n    paragraph.textContent = '';\n  });\n  surname.forEach(paragraph => {\n    paragraph.textContent = '';\n  });\n  birthYear.forEach(paragraph => {\n    paragraph.textContent = '';\n  });\n  deathYear.forEach(paragraph => {\n    paragraph.textContent = '';\n  });\n\n  const filteredElement = scientists.sort((a, b) => b.born - a.born)[0];\n\n  if (filteredElement) {\n    nameParagraphs[0].textContent = filteredElement.name;\n    surname[0].textContent = filteredElement.surname;\n    birthYear[0].textContent = filteredElement.born;\n    deathYear[0].textContent = filteredElement.dead;\n  }\n};\n\nconst longestAndSmallestYears = function () {\n  const earlyFiltered = scientists.sort((a, b) => a.born - b.born)[0];\n  if (earlyFiltered) {\n    nameParagraphs[0].textContent = earlyFiltered.name;\n    surname[0].textContent = earlyFiltered.surname;\n    birthYear[0].textContent = earlyFiltered.born;\n    deathYear[0].textContent = earlyFiltered.dead;\n  }\n\n  const latestFiltered = scientists.sort((a, b) => b.born - a.born)[0];\n  if (latestFiltered) {\n    nameParagraphs[1].textContent = latestFiltered.name;\n    surname[1].textContent = latestFiltered.surname;\n    birthYear[1].textContent = latestFiltered.born;\n    deathYear[1].textContent = latestFiltered.dead;\n  }\n};"],"names":["scientists","name","surname","born","dead","id","allBtns","document","querySelectorAll","forEach","btn","addEventListener","console","log","getAttribute","century","albertEinstein","ABC","firstNameC","deleteA","yearsSort","earlyYears","longestAndSmallestYears","surnamesMatch","nameParagraphs","birthYear","deathYear","filteredElements","filter","scientist","filteredNames","map","filteredSurname","filteredYear","filteredDeath","paragraph","index","textContent","allScientists","slice","sort","a","b","localeCompare","filteredElement","earlyFiltered","latestFiltered"],"version":3,"file":"index.77860ad4.js.map"}